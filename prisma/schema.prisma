// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @unique @default(autoincrement())
  email             String              @unique
  username          String
  password          String
  user_status       UserStatus          @default(Active)
  role              Role                @default(User)
  otp               Int?
  create_at         DateTime            @default(now())
  update_at         DateTime            @updatedAt
  Log               Log[]
  RefreshToken      RefreshToken[]
  ApplicationLetter ApplicationLetter[]
  Notification      Notification[]
  KK                KK[]
  Citizen           Citizen[]
  CashFlow          CashFlow[]
}

enum Action {
  LOGOUT
  LOGIN
  CREATE
  UPDATE
  DELETE
}

enum CategoryLetter {
  SuratPengantarKTP
  SuratKeteranganDomisili
  SuratKeteranganUsaha
  SuratPengantarNikah
  SuratKeteranganTidakMampu
}

enum Category {
  Kredit
  Debit
}

enum Gender {
  Male
  Female
}

enum UserStatus {
  Active
  Inactive
}

enum Role {
  Admin
  User
}

model Citizen {
  id        Int      @id @unique @default(autoincrement())
  full_name String
  dob       DateTime
  gender    Gender
  address   String
  kk_id     Int?
  nik       String   @unique
  create_by Int
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user      User     @relation(fields: [create_by], references: [id], onDelete: Cascade)
  KK        KK?      @relation(fields: [kk_id], references: [id], onDelete: Cascade)
}

model Log {
  id          Int      @id @unique @default(autoincrement())
  user_id     Int
  action      Action
  description String
  create_at   DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id            Int      @id @unique @default(autoincrement())
  user_id       Int
  refresh_token String   @db.VarChar(1024)
  create_at     DateTime @default(now())
  update_at     DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model CashFlow {
  id          Int      @id @unique @default(autoincrement())
  title       String
  description String
  date        DateTime @default(now())
  category    Category
  amount      Int
  create_by   Int
  create_at   DateTime @default(now())
  update_at   DateTime @updatedAt
  user        User     @relation(fields: [create_by], references: [id], onDelete: Cascade)
}

model KK {
  id             Int       @id @unique @default(autoincrement())
  head_of_family String
  kk             String    @unique
  create_by      Int
  create_at      DateTime  @default(now())
  update_at      DateTime  @updatedAt
  user           User      @relation(fields: [create_by], references: [id], onDelete: Cascade)
  Citizen        Citizen[]
}

model ApplicationLetter {
  id              Int            @id @unique @default(autoincrement())
  toEmail         String
  category_letter CategoryLetter
  data_nik        String
  create_by       Int
  create_at       DateTime       @default(now())
  user            User           @relation(fields: [create_by], references: [id], onDelete: Cascade)
}

model Notification {
  id          Int      @id @unique @default(autoincrement())
  title       String
  description String
  date        DateTime @default(now())
  create_by   Int
  create_at   DateTime @default(now())
  update_at   DateTime @updatedAt
  user        User     @relation(fields: [create_by], references: [id], onDelete: Cascade)
}
